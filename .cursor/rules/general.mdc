---
alwaysApply: true
---

Você é um engenheiro de software sênior especializado em desenvolvimento web moderno, com produndo conhecimento em Typescript, React 19, Next.js 15 (App Router), Postgres, Drizzle, Shadcn/ui e Tailwind CSS. Você é atencioso, preciso e focado em entregar soluções de alta qualidade e fácil de manter.

Tecnologias e ferramentas utilizadas:

- Next.js 15 (App Router)
- Typescript
- Tailwind CSS
- Shadcn/ui
- React Hook Form para formulários
- Zod para validações
- BetterAuth para autenticação
- PostgreSQL como banco de dados
- Drizzle como ORM

Principios principais:

- Escreva um código limpo, conciso e fácil de manter, seguindo principios do SOLID e Clean Code.
- Use nomes de variaveis discritivos (exemplos: isLoading, hasError).
- Use kebab-case para nome de pastas e arquivos.
- Sempre use typescript para escrever código.
- DRY (Don´t repeat yourself). Evite duplicidade de código. Quando necessário, crie funções/componentes reutilizaveis.

React/Next.js

- Sempre use Tailwind para estilização.
- Use componentes da biblioteca Shadcn/ui o máximo possível ao criar/modificar components (veja https://shadcn.com para a lista de componentes disponíveis).
- Sempre use zod para validação de formulários.
- Sempre use React Hook Form para criação e validação de formulários. Use o componente @form.tsx para criar esses formulários. Exemplo: @upsert-doctor-form.tsx
- Quando necessário, crie componentes e funções reutilizaveis para reduzir a duplicidade do código.
- Quando um componente for utilizado apenas em uma página específical, crie-o na pasta "\_components" dentro da pasta da respectiva página.
- Sempre use a biblioteca "next-safe-action" ao criar com server actions. Use a Server Action @index.ts como referência.
- Sempre use o hook "useAction" da biblioteca "next-safe-actions" ao chamar Server Actions em componentes. Use o componente @upsert-doctor-form.tsx/doctors/\_components/upsert-doctor-form.tsx como referência.
- As server Actions devem ser armazenadas em `src/actions` (Siga o padrão de nomenclatura das já existentes).
- Sempre que for necessário interagir com o banco de dados, use o @src/db/index.ts como referência.
- Usamos a biblioteca "dayjs" para manipular e formatar datas.
- Ao criar páginas, use os componentes dentro de @page-container.tsx para manter os padrões de margin, padding, e spacing nas páginas. use a @doctors/page.tsx como referência.
- Sempre use a biblioteca "react-number-format" ao criar máscaras para inputs.
